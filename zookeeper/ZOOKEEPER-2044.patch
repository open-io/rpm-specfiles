diff --git src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
index 0ed1c64..279832c 100644
--- src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
+++ src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
@@ -62,7 +62,7 @@
 
     final SocketChannel sock;
 
-    private final SelectionKey sk;
+    protected final SelectionKey sk;
 
     boolean initialized;
 
@@ -74,7 +74,7 @@
 
     int sessionTimeout;
 
-    private final ZooKeeperServer zkServer;
+    protected final ZooKeeperServer zkServer;
 
     /**
      * The number of requests that have been submitted but not yet responded to.
@@ -144,38 +144,49 @@ void sendBufferSync(ByteBuffer bb) {
     
     public void sendBuffer(ByteBuffer bb) {
         try {
-            if (bb != ServerCnxnFactory.closeConn) {
-                // We check if write interest here because if it is NOT set,
-                // nothing is queued, so we can try to send the buffer right
-                // away without waking up the selector
-                if ((sk.interestOps() & SelectionKey.OP_WRITE) == 0) {
-                    try {
-                        sock.write(bb);
-                    } catch (IOException e) {
-                        // we are just doing best effort right now
-                    }
-                }
-                // if there is nothing left to send, we are done
-                if (bb.remaining() == 0) {
-                    packetSent();
-                    return;
+            internalSendBuffer(bb);
+        } catch(Exception e) {
+            LOG.error("Unexpected Exception: ", e);
+        }
+    }
+
+    /**
+     * This method implements the internals of sendBuffer. We
+     * have separated it from send buffer to be able to catch
+     * exceptions when testing.
+     *
+     * @param bb Buffer to send.
+     */
+    protected void internalSendBuffer(ByteBuffer bb) {
+        if (bb != ServerCnxnFactory.closeConn) {
+            // We check if write interest here because if it is NOT set,
+            // nothing is queued, so we can try to send the buffer right
+            // away without waking up the selector
+            if(sk.isValid() &&
+                    ((sk.interestOps() & SelectionKey.OP_WRITE) == 0)) {
+                try {
+                    sock.write(bb);
+                } catch (IOException e) {
+                    // we are just doing best effort right now
                 }
             }
+            // if there is nothing left to send, we are done
+            if (bb.remaining() == 0) {
+                packetSent();
+                return;
+            }
+        }
 
-            synchronized(this.factory){
-                sk.selector().wakeup();
-                if (LOG.isTraceEnabled()) {
-                    LOG.trace("Add a buffer to outgoingBuffers, sk " + sk
-                            + " is valid: " + sk.isValid());
-                }
-                outgoingBuffers.add(bb);
-                if (sk.isValid()) {
-                    sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);
-                }
+        synchronized(this.factory){
+            sk.selector().wakeup();
+            if (LOG.isTraceEnabled()) {
+                LOG.trace("Add a buffer to outgoingBuffers, sk " + sk
+                        + " is valid: " + sk.isValid());
+            }
+            outgoingBuffers.add(bb);
+            if (sk.isValid()) {
+                sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);
             }
-            
-        } catch(Exception e) {
-            LOG.error("Unexpected Exception: ", e);
         }
     }
 
diff --git src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java
index 5c94ed7..f3cbb0e 100644
--- src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java
+++ src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java
@@ -18,6 +18,12 @@
 package org.apache.zookeeper.server;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.CancelledKeyException;
+import java.nio.channels.SelectionKey;
+import java.nio.channels.Selector;
+import java.nio.channels.ServerSocketChannel;
+import java.nio.channels.SocketChannel;
 
 import junit.framework.Assert;
 
@@ -68,4 +74,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
             zk.close();
         }
     }
+
+    /**
+     * Mock extension of NIOServerCnxn to test for
+     * CancelledKeyException (ZOOKEEPER-2044).
+     */
+    class MockNIOServerCnxn extends NIOServerCnxn {
+        public MockNIOServerCnxn( NIOServerCnxn cnxn )
+                throws IOException {
+            super( cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory );
+        }
+
+        public void mockSendBuffer(ByteBuffer bb) throws Exception {
+            super.internalSendBuffer( bb );
+        }
+    }
+
+    @Test(timeout = 30000)
+    public void testValidSelectionKey() throws Exception {
+        final ZooKeeper zk = createClient();
+        try {
+            Iterable<ServerCnxn> connections = serverFactory.getConnections();
+            for (ServerCnxn serverCnxn : connections) {
+                MockNIOServerCnxn mock = new MockNIOServerCnxn((NIOServerCnxn) serverCnxn);
+                // Cancel key
+                ((NIOServerCnxn) serverCnxn).sock.keyFor(((NIOServerCnxnFactory) serverFactory).selector).cancel();;
+                mock.mockSendBuffer( ByteBuffer.allocate(8) );
+            }
+        } catch (CancelledKeyException e) {
+            e.printStackTrace();
+            Assert.fail(e.toString());
+        } finally {
+            zk.close();
+        }
+    }
 }
